#!/bin/sh
# IMPORTANT: Make sure to run ytfeed with the `-f` flag for the first time setup

# AUTHOR: koalagang (https://github.com/koalagang)
# Dependencies: sfeed, yt-dlp (you might be able use youtube-dl?? see the 'YTDL' comment below)
# ffmpeg is also recommended if you want the highest quality videos
# This script uses RSS feeds to find the links to new videos from your desired channels.
# It might be able to work with other websites
# but I have written it only with YouTube and Invidious (tested with yewtu.be) in mind.
# It seems to work with Odysee too but all the videos are dumped into $VIDEO_DIR/NA
# rather than being sorted into different channels and I will probably not be fixing that.

# shellcheck disable=SC2016
# shellcheck disable=SC2115

# NOTE: last time I tried, this did not work with youtube-dl
# because it was unable to find the uploader ID
# so I'd recommend you just use yt-dlp because that works without issue in my experience
# If you still want to give youtube-dl a try, just comment out the line below
# and uncomment the line below that
YTDL='yt-dlp'
#YTDL='youtube-dl'

# All the necessary files and directories
VIDEO_DIR="$HOME/Videos/youtube"
# If the XDG environmental variables have been set, use those
# Otherwise, use the standard locations
# These are probably the same for most people but this is just in case
[ -n "$XDG_DATA_HOME" ] &&
    FEEDS_DIR="$XDG_DATA_HOME/ytfeed/feeds" || FEEDS_DIR="$HOME/.local/share/ytfeed/feeds"
[ -n "$XDG_CACHE_HOME" ] &&
    DOWNLOADS_DIR="$XDG_CACHE_HOME/ytfeed/downloads" || FEEDS_DIR="$HOME/.cache/ytfeed/feeds"
[ -n "$XDG_CACHE_HOME" ] &&
    HISTORY="$XDG_CACHE_HOME/ytfeed/history.txt" || FEEDS_DIR="$HOME/.cache/ytfeed/feeds"
[ -n "$XDG_CONFIG_HOME" ] &&
    SFEEDRC_DIR="$XDG_CONFIG_HOME/ytfeed" || FEEDS_DIR="$HOME/.config/ytfeed/feeds"

# DO NOT CHANGE THESE VARIABLES
SFEEDRC="$SFEEDRC_DIR/sfeedrc"
COMPLETE_DIR="$DOWNLOADS_DIR/complete"

# use the `-f` flag for first-time setup
if [ "$1" = '-f' ]; then
    echo 'Creating necessary files and directories...'

    echo "Created the following:"
    # create the other necessary files and directories if not already present
    [ -d "$FEEDS_DIR" ] || (mkdir -p "$FEEDS_DIR" && printf '\t%s\n' "$FEEDS_DIR")
    [ -d "$VIDEO_DIR" ] || (mkdir -p "$VIDEO_DIR" && printf '\t%s\n'  "$VIDEO_DIR")
    [ -d "$COMPLETE_DIR" ] || (mkdir -p "$COMPLETE_DIR" && printf '\t%s\n\t%s\n' "$DOWNLOADS_DIR" "$COMPLETE_DIR")
    [ -e "$HISTORY" ] || (touch "$HISTORY" && printf '\t%s\n' "$HISTORY")
    # create an sfeedrc (using the below template) if not already present
    [ -e "$SFEEDRC" ] || (mkdir -p "$SFEEDRC_DIR" && printf '# SFEEDRC GENERATED BY YTFEED %s\n
sfeedpath="%s"
# remember that these feeds are populated into $sfeedpath
# if you decide to remove anything from the below function, make sure they are not present inside $sfeedpath either
feeds(){
    feed "Gavin Freeborn" "https://yewtu.be/feed/channel/UCJetJ7nDNLlEzDLXv7KIo0w"
    feed "Brodie Robertson" "https://www.youtube.com/feeds/videos.xml?channel_id=UCld68syR8Wi-GY_n4CaoJGA"
}' "$(date '+%Y-%m-%d %T')" "$FEEDS_DIR" > "$SFEEDRC" && printf '\t%s\n
Please add your desired channels to %s and then re-run ytfeed without the `-f` flag\n' "$SFEEDRC" "$SFEEDRC")
    exit 0
fi

# check for updates to the RSS feeds
# if it fails, notify the user and cancel the script
echo "Querying feeds..."
sfeed_update "$SFEEDRC" || failed=1
[ -n "$failed" ] &&
    printf '\nerror: failed to query feeds\nPlease try again later\n' && exit 0

# find the links from the feeds (ignore any links that are also present in the history file)
urls="$(sfeed_plain "$FEEDS_DIR"/* | sed -n 's@^.* \([a-zA-Z]*://\)\(.*\)$@\1\2@p' | grep -vxFf "$HISTORY")"

# exit if there are no new links (i.e. links that are not in the history file)
[ -z "$urls" ] && echo 'No new videos found' && exit 0

for url in $urls; do

    # notify the user that we have begun downloading this video
    echo "Video $url downloading..."

    # just to be sure, clear the complete directory for a later operation
    rm -rf "$COMPLETE_DIR"/*

    # Download video using the filename template `name_of_channel-name_of_video.extension`.
    # This filename is commandline-friendly (contains no spaces, question marks, etc.).
    # The format used is just whatever the best quality you can get is
    # (usually webm in my experience).
    # We add chapters as this makes it easier to seek for particular portions of the video.
    # The use of --continue means that,
    # even if the user cancels the script in the middle of downloading a video,
    # they can continue to download it if they start the script again.
    # Ignoring warnings is also good to have because yt-dlp often spits out unimportant warnings.
    # Finally, the link to this video is stored in a history file
    # so we don't re-download it next time ytfeed is run.
    $YTDL "$url" \
        --output "%(uploader)s-%(title)s.%(ext)s" --restrict-filenames \
        --paths "temp:$DOWNLOADS_DIR" --paths "home:$COMPLETE_DIR" \
        --add-chapters \
        --continue \
        --no-warnings \
        && echo "$url" >> "$HISTORY"

    # cancel the script if the download failed (this could be due to network issues,
    # firewall restrictions or the user cancelling the yt-dlp operation)
    grep -x "$url" "$HISTORY" || failed=1
    [ -n "$failed" ] && echo 'error: failed to download video' && exit 0

    # find the absolute path to the file
    file="$(readlink -f "$COMPLETE_DIR"/*)"
    # and the name of the file itself (including its extension)
    filename="$(basename "$file")"

    # find the name of the channel and the name of the video
    # clears all hyphens besides the first one
    # (as this is the delimeter between channel and title)
    channel="$(echo "$filename" | sed 's/-//2g' | cut -d'-' -f1)"
    title="$(echo "$filename" | sed 's/-//2g' | cut -d'-' -f2)"

    # create the respective folder if the channel does not already have one
    # and move the file into that folder
    # it strips out the channel name from filename
    # as this is unnecessary when the folder name denotes this already
    mkdir -p "$VIDEO_DIR/$channel" && mv "$file" "$VIDEO_DIR/$channel/$title"

    # notify the user that this video has been downloaded
    printf 'Video %s downloaded\n\n' "$url"
done

# notify the user that the script is done
echo 'ytfeed complete!'
